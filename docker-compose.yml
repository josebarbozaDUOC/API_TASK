# docker-compose.yml

services:
  backend:
    build: ./backend
    container_name: api-task-backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend/src:/app/src
      - ./storage:/app/storage
      - ./.env:/app/.env:ro
      - ./.env.example:/app/.env.example:ro
    env_file:
      - .env.example
      - .env
    environment:
      - POSTGRES_HOST=postgres  # Override para usar el nombre del servicio
    depends_on:
      postgres:
        condition: service_healthy  # Espera hasta que PostgreSQL est√© listo
    networks:
      - backend-db
    restart: unless-stopped  # Auto-reiniciar si falla

  postgres:
    image: postgres:17-alpine
    container_name: task-postgres
    ports:
      - "5432:5432"
    env_file:
      - .env.example
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend-db
    restart: unless-stopped  # Auto-reiniciar si falla

volumes:
  postgres_data:  # Docker crea y gestiona este volumen

networks:
  backend-db:
    driver: bridge